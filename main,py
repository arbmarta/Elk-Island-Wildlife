# -------------------------------------------- IMPORT PACKAGES AND DATASETS --------------------------------------------
#region

# Import packages
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import gaussian_kde, norm
from sklearn.utils import resample

# Import dataset
df = pd.read_csv('Dataset.csv')
df_wl_raw = pd.read_csv('Datasets/water-levels.csv')
df_cd = pd.read_csv('Datasets/climate-daily.csv')
df_ss = pd.read_csv('Datasets/Sunrise and Sunset.csv')

# Print columns
print(df.columns)
print(df_ss.head())

#endregion

# ----------------------------------------- ADJUST COLUMNS IN DETECTION DATASET ----------------------------------------
#region

# Create cardinal direction column
df['Cardinal Direction'] = df['Location'].replace({'Marsh': 'West', 'Pond': 'East'})

# Correct values in column Animal
df['Animal'] = df['Animal'].replace({'Alex': 'Human', 'Person': 'Human'})
df['Animal'] = df['Animal'].replace({'Racoon': 'Raccoon'})

# Correct values in column Animal
df = df[~df['Animal'].isin(['Squirrel', 'Snake', 'Heron', 'Eagle', 'Bunny', 'Birds'])]

#endregion

# ---------------------------------------- ADJUST COLUMNS IN WATER LEVEL DATASET ---------------------------------------
#region

# Create a date column
df_wl_raw['Date'] = df_wl_raw['Date (CST)'].str.split().str[0]
print(df_wl_raw.head())

# Group by Date and summarize Value(m)
df_wl = df_wl_raw.groupby('Date')['Value(m)'].agg(
    Max_Level='max',
    Min_Level='min',
    Average_Level='mean'
).reset_index()

#endregion

# ---------------------------------------------------- TABLE 1 DATA ----------------------------------------------------
#region

# Make sure Date is datetime
df['Date'] = pd.to_datetime(df['Date'], format='%Y-%m-%d')

# Filter for Human observations only
human_df = df[df['Animal'] == 'Human']

# Filter starting from May 10, 2023
human_df = human_df[human_df['Date'] >= '2023-05-10']

# Set Date as index
human_df = human_df.set_index('Date')

# Sum counts over each 7-day window per Location
weekly_sums = human_df.groupby('Location').resample('7D')['Count'].sum().reset_index()

# Now summarize: mean and range (max - min) per Location
summary = weekly_sums.groupby('Location')['Count'].agg(
    mean='mean',
    range=lambda x: x.max() - x.min()
)

# Print the summary table
print(summary)

# Sum across all weeks to get total number of Human detections per Location
total_human_detections = weekly_sums.groupby('Location')['Count'].sum()
print(total_human_detections)

#endregion

# ---------------------------------------------------- TABLE 2 DATA ----------------------------------------------------
#region

# Summarize the number of group observations
animal_counts = df['Animal'].value_counts().sort_index()
print(animal_counts)

# Summarize the number of total detections
animal_sums = df.groupby('Animal')['Count'].sum().sort_index()
print(animal_sums)

# Summarize the number of group observations by each location
animal_counts_by_direction = df.groupby(['Cardinal Direction', 'Animal']).size().sort_index()
print(animal_counts_by_direction)

# Summarize the number of total detections by each location
animal_sums_by_direction = df.groupby(['Cardinal Direction', 'Animal'])['Count'].sum().sort_index()
print(animal_sums_by_direction)

#endregion

# ------------------------------------------ FIGURE 2 - KDE AND OVERLAP SETUP ------------------------------------------
#region

## Prepare dataframe rows of animals for KDEs
wildlife_species = ['Coyote', 'Raccoon', 'Deer'] # list of species to compare against Human
df_species = df[df['Animal'].isin(['Human'] + wildlife_species)].copy() # prepare Human + all wildlife rows
df_species['Time'] = pd.to_datetime(df_species['Time'], format='%H:%M:%S', errors='coerce') # ensure Time is datetime
df_species['Time_minutes'] = df_species['Time'].dt.hour * 60 + df_species['Time'].dt.minute # minutes since midnight

## Setup bootstrapping
bootstrap_samples = 10  # (Change to 10000 for final version)
time_grid = np.linspace(0, 1440, 240)  # 0–1440 minutes (24h)

# run human bootstrapping
human_df = df_species[df_species['Animal'] == 'Human'] # precompute bootstrapped Human KDE once
all_human_kdes = []

for _ in range(bootstrap_samples):
    sample = human_df['Time_minutes'].sample(frac=1, replace=True)
    kde = gaussian_kde(sample, bw_method=0.2)
    kde_values = kde.evaluate(time_grid)
    all_human_kdes.append(kde_values)

all_human_kdes = np.array(all_human_kdes)
mean_human_kde = np.mean(all_human_kdes, axis=0)

## Define simple line styles
human_line_style = {'color': 'black', 'linestyle': '-', 'linewidth': 2}
wildlife_line_style = {'color': 'blue', 'linestyle': '--', 'linewidth': 2}

## Set up sunrise and sunset dataframe
# Ensure Sunrise and Sunset are datetime.time type
df_ss['Sunrise'] = pd.to_datetime(df_ss['Sunrise'], format='%H:%M', errors='coerce').dt.time
df_ss['Sunset'] = pd.to_datetime(df_ss['Sunset'], format='%H:%M', errors='coerce').dt.time

# Ensure Nautical Twighlight are datetime.time type
df_ss['Nautical Twilight start'] = pd.to_datetime(df_ss['Nautical Twilight start'], format='%H:%M', errors='coerce').dt.time
df_ss['Nautical Twilight end'] = pd.to_datetime(df_ss['Nautical Twilight end'], format='%H:%M', errors='coerce').dt.time

# Convert Sunrise and Sunset to minutes since midnight
def time_to_minutes(t):
    return t.hour * 60 + t.minute

df_ss['Sunrise_minutes'] = df_ss['Sunrise'].apply(time_to_minutes)
df_ss['Sunset_minutes'] = df_ss['Sunset'].apply(time_to_minutes)
df_ss['Nautical Twilight start_minutes'] = df_ss['Nautical Twilight start'].apply(time_to_minutes)
df_ss['Nautical Twilight end_minutes'] = df_ss['Nautical Twilight end'].apply(time_to_minutes)

#endregion

# ------------------------------------------- FIGURE 2 - COEFFICIENT OF OVERLAP ----------------------------------------
#region

# Setup
alpha = 0.05

# Pre-filter Human data
human_times = df_species[df_species['Animal'] == 'Human']['Time_minutes'].dropna().values

# Loop through each wildlife species
for wildlife in wildlife_species:
    wildlife_times = df_species[df_species['Animal'] == wildlife]['Time_minutes'].dropna().values

    # Bootstrap overlap coefficients
    overlaps = []

    for _ in range(bootstrap_samples):
        human_sample = resample(human_times, replace=True)
        wildlife_sample = resample(wildlife_times, replace=True)

        kde_human = gaussian_kde(human_sample, bw_method=0.2)
        kde_wildlife = gaussian_kde(wildlife_sample, bw_method=0.2)

        human_density = kde_human(time_grid)
        wildlife_density = kde_wildlife(time_grid)

        overlap = np.trapz(np.minimum(human_density, wildlife_density), time_grid)
        overlaps.append(overlap)

    overlaps = np.array(overlaps)
    overlap_mean = np.mean(overlaps)
    overlap_ci_lower = np.percentile(overlaps, 100 * alpha / 2)
    overlap_ci_upper = np.percentile(overlaps, 100 * (1 - alpha / 2))

    # Wald test
    diff_density = human_density - wildlife_density
    var = np.var(diff_density)
    z_stat = np.mean(diff_density) / np.sqrt(var / len(time_grid))
    p_value = 2 * (1 - norm.cdf(abs(z_stat)))

    # Print results
    print(f"\n{wildlife}:")
    print(f"Overlap Coefficient (mean): {overlap_mean:.3f}")
    print(f"95% CI: [{overlap_ci_lower:.3f}, {overlap_ci_upper:.3f}]")
    print(f"Wald test Z = {z_stat:.3f}, p = {p_value:.4f}")
    if p_value < 0.05:
        print("→ Significant difference in activity patterns.")
    else:
        print("→ No significant difference in activity patterns.")

#endregion

# ----------------------------------------------- FIGURE 2 - KDE RUN (V2) ----------------------------------------------
#region

## Create a graph for each wildlife species compared to Human
for wildlife in wildlife_species:

    subset = df_species[df_species['Animal'] == wildlife]
    all_wildlife_kdes = []

    for _ in range(bootstrap_samples):
        sample = subset['Time_minutes'].sample(frac=1, replace=True)
        kde = gaussian_kde(sample, bw_method=0.2)
        kde_values = kde.evaluate(time_grid)
        all_wildlife_kdes.append(kde_values)

    all_wildlife_kdes = np.array(all_wildlife_kdes)
    mean_wildlife_kde = np.mean(all_wildlife_kdes, axis=0)

    # Plot Human vs current wildlife species
    plt.figure(figsize=(10, 6))

    # Plot backgrounds - solid
    plt.axvspan(321, 398.5, color='red', alpha=0.3, zorder=1) # sunrise
    plt.axvspan(1213.5, 1294.25, color='red', alpha=0.3, zorder=1) # sunset
    plt.axvspan(213, 322.25, color='purple', alpha=0.3, zorder=1) # nautical sunrise
    plt.axvspan(1289.25, 1403, color='purple', alpha=0.3, zorder=1) # nautical sunset
    plt.axvspan(793, 812.5, color='lightblue', alpha=0.3, zorder=1) # mid-day
    plt.fill_between(time_grid, -0.5, 0, color='white', alpha=1, zorder=3)

    # Plot white under the curves
    plt.fill_between(time_grid,0, mean_human_kde, color='white', alpha=1, zorder=2) # plot white under the human curve
    plt.fill_between(time_grid,0, mean_wildlife_kde, color='white', alpha=1, zorder=2) # plot white under the wildlife curve



    # Plot the curves
    plt.plot(time_grid, mean_human_kde, label='Human', **human_line_style)
    plt.plot(time_grid, mean_wildlife_kde, label=wildlife, **wildlife_line_style)

    # Shade the overlap
    overlap = np.minimum(mean_human_kde, mean_wildlife_kde)
    plt.fill_between(
        time_grid,
        0,
        overlap,
        where=(overlap > 0),
        color='grey',
        alpha=0.5,
        zorder = 3
    )

    # Customize x-axis
    plt.xlim(0, 1440)
    plt.xticks(
        ticks=[0, 360, 720, 1080, 1440],
        labels=['00:00', '06:00', '12:00', '18:00', '24:00'],
        rotation=0,
        fontsize=12
    )

    # Customize y-axis
    plt.ylim(-0.00005, 0.0025)
    plt.yticks(fontsize=12)

    # Set axis labels
    plt.xlabel('Time of Day', fontsize=12, fontweight='bold')
    plt.ylabel('Density', fontsize=12, fontweight='bold')

    # Title
    plt.title(f'Human & {wildlife}', fontsize=12, fontweight='bold')

    # Remove legend
    plt.legend().remove()

    plt.tight_layout()
    plt.show()

#endregion

# ----------------------------------------------- MULTIVARIATE REGRESSION ----------------------------------------------
#region

ndvi_differences = [
    ("2023-05-26", 0.0651),
    ("2023-06-06", 0.0596),
    ("2023-06-10", 0.0557),
    ("2023-06-11", 0.0215),
    ("2023-06-12", 0.1208),
    ("2023-06-15", 0.0388),
    ("2023-06-20", 0.0539),
    ("2023-07-06", 0.0471),
    ("2023-07-06", 0.0504),
    ("2023-07-20", 0.0223),
    ("2023-07-21", 0.0014),
    ("2023-07-27", 0.0396),
    ("2023-08-03", 0.0308),
    ("2023-08-18", -0.0037),
    ("2023-08-27", 0.0519),
    ("2023-09-20", 0.0672),
    ("2023-09-26", 0.0191),
    ("2023-09-27", 0.0100),
    ("2023-09-27", 0.0039),
]

#endregion
